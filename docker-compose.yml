version: '3.8'

services:
  # Frontend React Application
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://backend:5000/api
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - server
    networks:
      - app-network
    stdin_open: true
    tty: true

  # Backend Node.js API
  backend:
    build:
      context: ./server
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGO_URI=mongodb+srv://dbUser:nas32ksuper18theBestDeveloper@cluster0.5zivful.mongodb.net/apartment-management?retryWrites=true&w=majority&appName=cluster0
    volumes:
      - ./server:/app
      - /app/node_modules
      - ./server/uploads:/app/uploads
    depends_on:
      - mongo
    networks:
      - app-network
    command: npm run dev

  # MongoDB Database
  mongo:
    image: mongo:6.0
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=apartment-rental
    volumes:
      - mongo-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - app-network

  # MongoDB Express (Optional - for database management)
  mongo-express:
    image: mongo-express:1.0.0-alpha
    restart: always
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_BASICAUTH_USERNAME=dbUser
      - ME_CONFIG_BASICAUTH_PASSWORD=nas32ksuper18theBestDeveloper
    depends_on:
      - mongo
    networks:
      - app-network

volumes:
  mongo-data:
    driver: local

networks:
  app-network:
    driver: bridge